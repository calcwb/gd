#!/usr/bin/env python
#
# Copyright (C) 2011  Governo do Estado do Rio Grande do Sul
#
#   Author: Lincoln de Sousa <lincoln@gg.rs.gov.br>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""The entry point for the buzzwatcher application"""

from urllib import urlopen
from urllib2 import HTTPError
from time import sleep
from json import loads
from tweetstream import FilterStream, ConnectionError
from sqlalchemy.orm.exc import NoResultFound

from gd.model import Audience, session, Buzz, BuzzType, get_or_create, conf, \
     AudiencePostsMeta

USER_API_URL = 'http://api.twitter.com/1/users/show.json?screen_name=%s'

class Twitter(object):
    """A twitter stream client that saves tweets from some given
    `profiles' and `hashtags'.
    """
    def __init__(self, audience):
        self.audience = audience
        self.profiles, self.hashtags = self.get_profiles_and_hashtags()
        self.profileids = []

        # We have to resolve these ID's before doing anything else. This
        # function will be called until things works properly
        while not self.resolve_profile_ids():
            print 'Unable to resolve profile ids, trying again soon!'
            sleep(30)

    def get_profiles_and_hashtags(self):
        profiles, hashtags = [], []
        terms = self.audience.meta_value;
        terms = terms[terms.find('{'):terms.find('}')+1].split(';')
        hash= []
        for i, v in enumerate(terms):
            if i%2 != 0:
                hash.append(v)

        hash = ''.join(hash)

        terms = hash.split('"')
        for i, v in enumerate(terms):
            if i%2 !=0:
                if v.startswith('@'):
                    profiles.append(v)
                else:
                    hashtags.append(v)

        return profiles, hashtags

    def resolve_profile_ids(self):
        """We need to resolve the screen names to user ids to use the
        twitter stream API. This method does this job by requesting the
        `USER_API_URL' and getting the `id' property from the returned
        json content.
        """
        for screen_name in self.profiles:
            try:
                # Catching any connection or json parsing error here. We
                # have to make sure that no error will escape from this
                # cage!
                content = urlopen(USER_API_URL % screen_name).read()
                parsed = loads(content)
            except Exception, exc:
                return False

            # Everything ok with the request, but the retrieved content
            # is not what we want!
            if not 'id' in parsed:
                return False

            # Now everything seems to be nice. Let's keep working
            self.profileids.append(parsed['id'])

        # All received ids resolved, let's go ahead and wait for tweets!
        print 'IDs resolved successful'
        return True

    def process(self):
        """Here's the place that we actually call the stream API and
        capture found tweets.buzzes

        Each time we receive a new tweet, we create a `Buzz' instance.wp_postmeta_
        with it's owner and content info and then yield it to the
        caller. None is saved to the database here.
        """
        print 'processing %s, %s' % (self.profileids, self.hashtags)
        try:
            stream = FilterStream(
                conf.TWITTER_STREAM_USERNAME,
                conf.TWITTER_STREAM_PASSWORD,
                follow=self.profileids, track=self.hashtags)

            for tweet in stream:
                # We're creating a new entry in our buzz entity for each
                # tweet received. We are also setting this buzz as a
                # twitter one and yielding it to the caller that will be
                # the responsible for saving it in the database.
                # Test of audience active.
                try:
                    audience = AudiencePostsMeta.query.filter_by(meta_key = 'wp_govescuta_ativa', meta_value='s').one()
                except Exception, exc:
                    print 'msg = Nenhuma audiencia ativa no momento'
                    if (NoResultFound):
                        sleep(30)
                        main()
                    else:
                        print 'Nothing to be processed or too much things to process'
                        print 'Make sure you have only `one\' audience running'
                        exit(0)
                            
                if tweet.has_key('user'):
                    type_ = get_or_create(BuzzType, name=u'twitter')[0]
                    buzz = Buzz(
                        owner_nick=tweet['user']['screen_name'],
                        owner_avatar=tweet['user']['profile_image_url'],
                        content=tweet['text'],
                        type_=type_)
                    buzz.audience_id = self.audience.post_ID
                    session.commit()

        except (ConnectionError, HTTPError), exc:
            # Something got screwed, let's try some seconds late.
            # FIXME: We really should limit the number of tries here and
            # warning the sysadmin that something is wrong.
            name = exc.__class__.__name__
            print 'Crawler::%s trying again soon...' % name
            sleep(30)
            self.process()



def main():
    try:
        audience = AudiencePostsMeta.query.filter_by(meta_key = 'wp_govescuta_ativa', meta_value='s').one()
        audience = AudiencePostsMeta.query.filter_by(meta_key = 'wp_govescuta_hashtags_audiencia', post_ID=audience.post_ID).one()
    except Exception, exc:
        print 'msg = Nenhuma audiencia ativa no momento'
        if (NoResultFound):
            sleep(30)
            main()
        else:
            print 'Nothing to be processed or too much things to process'
            print 'Make sure you have only `one\' audience running'
            exit(0)
    twitter = Twitter(audience)
    twitter.process()

if __name__ == '__main__':
    main()
